[versions]
assertj = "3.11.1"
junit = "5.5.1"
kotlin = "1.9.10"
kotlinx-binary-compatibility-validator = "0.13.2"
kotlin-coroutines = "1.6.2"
ktor = "1.6.3"
mockk = "1.10.2"
okhttp3-logging-interceptor = "3.8.0"
okhttp3-mockwebserver = "4.2.1"
retrofit = "2.9.0"

[libraries]
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlin-coroutines" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
okhttp3-logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp3-logging-interceptor" }
retrofit-core = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit-converter-gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }

# Testing
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
junit-jupiter-core = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlin-coroutines" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
okhttp3-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp3-mockwebserver" }

[bundles]
junit = ["junit-jupiter-core", "junit-jupiter-api", "junit-jupiter-params"]
retrofit = ["retrofit-core", "retrofit-converter-gson"]

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinx-binaryCompatibilityValidator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "kotlinx-binary-compatibility-validator" }
